import { expect } from 'chai';
import { stringToBuffer, trimHexInput } from '../utils/test-helpers';
import { TagManager } from './tag-manager';
import { tagsToTiff } from './tags-to-tiff';
import { tiffToTags } from './tiff-to-tags';

describe('tiff-to-tags', () => {
  function printTags(tagViewers: TagManager) {
    tagViewers.forEach((tag) => {
      if (tag.value instanceof TagManager) {
        console.group(tag.label, tag.tagId, tag.type);
        tag.value.forEach((tag) => {
          console.log(tag.label, tag.tagId, tag.type, tag.value);
        });
        console.groupEnd();
      } else {
        console.log(tag.label, tag.tagId, tag.type, tag.value);
      }
    });
  }

  it('should decode two long string tags from tiff', async () => {
    const buffer = stringToBuffer(`
      4D4D 002A 00000008 0002
      010E 0002 00000006 00000022 
      010F 0002 00000006 00000028 
      616263646500 
      666768696A00
    `);

    const tagViewers = tiffToTags(buffer);

    expect(tagViewers.length).to.equals(2);
  });
  it('should decode simple tiff', async () => {
    const buffer = stringToBuffer(`
      4D4D002A 00000008 00050112 00030000 00010001 0000011A 00050000 00010000 004A011B 00050000 00010000 00520128 
      00030000 00010002 00008769 00040000 00010000 005A0000 00000000 00900000 00010000 00900000 00010003 92860007 
      00000012 00000084 A0020004 00000001 00000070 A0030004 00000001 00000070 00000000 41534349 49000000 53637265 
      656E7368 6F74 
    `);

    const tags = tiffToTags(buffer);

    expect(tags.length).to.equals(5);
    console.log(tags[4]);
    expect(tags[4].rawValue.length).to.equals(3);
  });
  it('should decode complex tiff', async () => {
    const input = `
      4D4D002A 00000008 000A010E 00020000 00200000 0086010F 00020000 00180000 00A60110 00020000 00110000 00BE011A 
      00050000 00010000 00D0011B 00050000 00010000 00D80128 00030000 00010002 00000131 00020000 00200000 00E00132 
      00020000 00140000 01008769 00040000 00010000 01148825 00040000 00010000 03600000 00004F4C 594D5055 53204449 
      47495441 4C204341 4D455241 20202020 20202020 20004F4C 594D5055 5320434F 52504F52 4154494F 4E202020 2000452D 
      4D313020 4D61726B 20494949 20200000 0000015E 00000001 0000015E 00000001 56657273 696F6E20 312E3220 20202020 
      20202020 20202020 20202020 20202000 32303230 3A30313A 30342031 343A3531 3A313200 0022829A 00050000 00010000 
      02B2829D 00050000 00010000 02BA8822 00030000 00010003 00008827 00030000 00010FA0 00008830 00030000 00010001 
      00009000 00070000 00043032 33319003 00020000 00140000 02C29004 00020000 00140000 02D69010 00020000 00070000 
      02EA9011 00020000 00070000 02F29012 00020000 00070000 02FA9101 00070000 00040102 03009204 000A0000 00010000 
      03029205 00050000 00010000 030A9207 00030000 00010005 00009208 00030000 00010000 00009209 00030000 00010008 
      0000920A 00050000 00010000 0312A000 00070000 00043031 3030A001 00030000 0001FFFF 0000A002 00040000 00010000 
      1200A003 00040000 00010000 0D80A300 00070000 00010300 0000A401 00030000 00010000 0000A402 00030000 00010001 
      0000A403 00030000 00010000 0000A404 00050000 00010000 031AA406 00030000 00010000 0000A407 00030000 00010002 
      0000A408 00030000 00010000 0000A409 00030000 00010000 0000A40A 00030000 00010000 0000A432 00050000 00040000 
      0322A434 00020000 001E0000 03420000 00000000 00010000 003C0000 00040000 00013230 32303A30 313A3034 2031343A 
      35313A31 32003230 32303A30 313A3034 2031343A 35313A31 32002020 203A2020 00002020 203A2020 00002020 203A2020 
      0000FFFF FFFD0000 000A0000 039D0000 01000000 00130000 00010000 00010000 00010000 000E0000 00010000 002A0000 
      00010000 00070000 00020000 001C0000 00054F4C 594D5055 53204D2E 31342D34 326D6D20 46332E35 2D352E36 20455A00 
      00050001 00020000 00024E00 00000002 00050000 00030000 03A20003 00020000 00025700 00000004 00050000 00030000 
      03BA001F 00050000 00010000 03D20000 00000000 00330000 00010000 001E0000 00010000 10DE0000 00640000 00000000 
      00010000 00070000 00010000 138C0000 00640000 00000000 0001
    `;
    const buffer = stringToBuffer(input);
    const tagManager = tiffToTags(buffer);

    printTags(tagManager);

    expect(tagManager.length).to.equals(10);
    expect(tagManager[8].rawValue.length).to.equals(34);
    expect(tagManager[9].rawValue.length).to.equals(5);

    const backToBuffer = tagsToTiff(tagManager, true);

    const a = backToBuffer.toString('hex').toUpperCase();
    const b = trimHexInput(input);

    for (let i = 0; i < a.length; i += 2) {
      if (a.substr(i, 2) !== b.substr(i, 2)) {
        console.log('incompatibility at', i / 2);
        console.log(a.substr(i));
        console.log(b.substr(i));
        break;
      }
    }

    expect(a).to.equals(b);
  });
});
